// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ AUTHENTIFICATION & ORGANISATIONS ============

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ownedOrganisations Organisation[]     @relation("OrganisationOwner")
  userOrganisations  UserOrganisation[]

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Organisation {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner             User               @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  userOrganisations UserOrganisation[]
  properties        Property[]

  @@map("organisations")
}

model UserOrganisation {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  organisationId String   @map("organisation_id")
  role           Role     @default(VIEWER)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([userId, organisationId])
  @@map("user_organisations")
}

enum Role {
  ADMIN
  MANAGER
  VIEWER
}

// ============ PROPRIÉTÉS & ESPACES ============

model Property {
  id             String   @id @default(cuid())
  organisationId String   @map("organisation_id")
  name           String
  address        String?
  description    String?
  mainImageUrl   String?  @map("main_image_url")
  propertyType   String?  @map("property_type") // appartement, chambre d'hôtel, espace de réunion, etc.
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  rooms        Room[]

  @@map("properties")
}

model Room {
  id            String   @id @default(cuid())
  propertyId    String   @map("property_id")
  name          String // Nom de la chambre/espace
  roomNumber    String?  @map("room_number")
  roomType      String?  @map("room_type") // single, double, suite, espace réunion, etc.
  description   String?
  capacity      Int? // nombre de personnes
  pricePerNight Decimal? @map("price_per_night") @db.Decimal(10, 2)
  images        String[] // Array d'URLs d'images
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  property       Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  equipments     Equipment[]
  checkInOut     CheckInOut?
  availabilities Availability[]
  reservations   Reservation[]

  @@map("rooms")
}

model Equipment {
  id          String  @id @default(cuid())
  roomId      String  @map("room_id")
  name        String
  icon        String? // nom de l'icône (ex: "wifi", "tv", "parking")
  description String?

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("equipments")
}

model CheckInOut {
  id           String  @id @default(cuid())
  roomId       String  @unique @map("room_id")
  checkinTime  String? @map("checkin_time") // Format "14:00"
  checkoutTime String? @map("checkout_time") // Format "11:00"
  instructions String? // Instructions spéciales

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("check_in_out")
}

// ============ PLANNING & DISPONIBILITÉS ============

model Availability {
  id        String             @id @default(cuid())
  roomId    String             @map("room_id")
  startDate DateTime           @map("start_date") @db.Date
  endDate   DateTime           @map("end_date") @db.Date
  status    AvailabilityStatus @default(AVAILABLE)
  notes     String?
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("availabilities")
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  RESERVED
  MAINTENANCE
}

// ============ RÉSERVATIONS ============

model Reservation {
  id         String            @id @default(cuid())
  roomId     String            @map("room_id")
  guestName  String            @map("guest_name")
  guestEmail String?           @map("guest_email")
  startDate  DateTime          @map("start_date") @db.Date
  endDate    DateTime          @map("end_date") @db.Date
  status     ReservationStatus @default(PENDING)
  totalPrice Decimal?          @map("total_price") @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// ============ NEXTAUTH MODELS ============

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============ CONFIGURATION UTILISATEUR ============

model UserPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique @map("user_id")
  establishmentType   String  @default("hotel") @map("establishment_type") // "hotel" ou "espace"
  preferredLanguage   String  @default("fr") @map("preferred_language")
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")

  @@map("user_preferences")
}
