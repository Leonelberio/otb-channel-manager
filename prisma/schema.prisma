// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ AUTHENTIFICATION & ORGANISATIONS ============

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ownedOrganisations Organisation[]     @relation("OrganisationOwner")
  userOrganisations  UserOrganisation[]
  integrations       Integration[]
  userPreferences    UserPreferences?

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Organisation {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner             User               @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  userOrganisations UserOrganisation[]
  properties        Property[]

  @@map("organisations")
}

model UserOrganisation {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  organisationId String   @map("organisation_id")
  role           Role     @default(VIEWER)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([userId, organisationId])
  @@map("user_organisations")
}

enum Role {
  ADMIN
  MANAGER
  VIEWER
}

// ============ PROPRIÉTÉS & ESPACES ============

model Property {
  id                String   @id @default(cuid())
  organisationId    String   @map("organisation_id")
  name              String
  address           String?
  description       String?
  mainImageUrl      String?  @map("main_image_url")
  propertyType      String?  @map("property_type") // appartement, chambre d'hôtel, espace de réunion, etc.
  establishmentType String   @default("hotel") @map("establishment_type") // "hotel" or "espace"
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  organisation          Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  rooms                 Room[]
  propertySettings      PropertySettings?
  usersWithLastActivity UserPreferences[] @relation("UserLastActiveProperty")

  @@map("properties")
}

model Room {
  id            String   @id @default(cuid())
  propertyId    String   @map("property_id")
  name          String // Nom de la chambre/espace
  roomNumber    String?  @map("room_number")
  roomType      String?  @map("room_type") // single, double, suite, espace réunion, etc.
  description   String?
  capacity      Int? // nombre de personnes
  pricePerNight Decimal? @map("price_per_night") @db.Decimal(10, 2)
  pricingType   String?  @default("night") @map("pricing_type") // "day", "night", "hour"
  images        String[] // Array d'URLs d'images
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  property        Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  equipments      Equipment[]
  checkInOut      CheckInOut?
  availabilities  Availability[]
  reservations    Reservation[]
  externalEvents  ExternalEvent[]
  calendarConfigs CalendarConfig[]

  @@map("rooms")
}

model Equipment {
  id          String  @id @default(cuid())
  roomId      String  @map("room_id")
  name        String
  icon        String? // nom de l'icône (ex: "wifi", "tv", "parking")
  description String?

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("equipments")
}

model CheckInOut {
  id           String  @id @default(cuid())
  roomId       String  @unique @map("room_id")
  checkinTime  String? @map("checkin_time") // Format "14:00"
  checkoutTime String? @map("checkout_time") // Format "11:00"
  instructions String? // Instructions spéciales

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("check_in_out")
}

// ============ PLANNING & DISPONIBILITÉS ============

model Availability {
  id        String             @id @default(cuid())
  roomId    String             @map("room_id")
  startDate DateTime           @map("start_date") @db.Date
  endDate   DateTime           @map("end_date") @db.Date
  status    AvailabilityStatus @default(AVAILABLE)
  notes     String?
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("availabilities")
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  RESERVED
  MAINTENANCE
}

// ============ RÉSERVATIONS ============

model Reservation {
  id         String            @id @default(cuid())
  roomId     String            @map("room_id")
  guestName  String            @map("guest_name")
  guestEmail String?           @map("guest_email")
  startDate  DateTime          @map("start_date") @db.Date
  endDate    DateTime          @map("end_date") @db.Date
  startTime  String?           @map("start_time") // Format "HH:MM"
  duration   Int? // Durée en heures
  status     ReservationStatus @default(PENDING)
  totalPrice Decimal?          @map("total_price") @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  TO_PAY
  PAID
  CANCELLED
  REFUNDED
}

// ============ NEXTAUTH MODELS ============

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============ CONFIGURATION UTILISATEUR ============

model UserPreferences {
  id                   String  @id @default(cuid())
  userId               String  @unique @map("user_id")
  establishmentType    String  @default("hotel") @map("establishment_type") // "hotel" ou "espace"
  preferredLanguage    String  @default("fr") @map("preferred_language")
  currency             String  @default("XOF") // "EUR", "USD", "XOF" (CFA)
  onboardingCompleted  Boolean @default(false) @map("onboarding_completed")
  lastActivePropertyId String? @map("last_active_property_id") // Track last visited property

  // Relations
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastActiveProperty Property? @relation("UserLastActiveProperty", fields: [lastActivePropertyId], references: [id], onDelete: SetNull)

  @@map("user_preferences")
}

model PropertySettings {
  id         String @id @default(cuid())
  propertyId String @unique @map("property_id")
  currency   String @default("XOF") // "EUR", "USD", "XOF" (CFA)
  timezone   String @default("Europe/Paris")
  language   String @default("fr")

  // Widget configuration (for booking widget)
  widgetPrimaryColor String  @default("#8ABF37") @map("widget_primary_color")
  widgetButtonColor  String  @default("#8ABF37") @map("widget_button_color")
  widgetEnabled      Boolean @default(true) @map("widget_enabled")

  // Booking settings
  allowInstantBooking    Boolean @default(false) @map("allow_instant_booking")
  requireApproval        Boolean @default(true) @map("require_approval")
  maxAdvanceBookingDays  Int     @default(365) @map("max_advance_booking_days")
  minAdvanceBookingHours Int     @default(2) @map("min_advance_booking_hours")

  // Check-in/out settings
  defaultCheckinTime  String? @map("default_checkin_time") // Format "15:00"
  defaultCheckoutTime String? @map("default_checkout_time") // Format "11:00"

  // Notification settings
  emailNotifications Boolean @default(true) @map("email_notifications")
  smsNotifications   Boolean @default(false) @map("sms_notifications")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_settings")
}

// ============ INTÉGRATIONS & CALENDRIER ============

model Integration {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  type         String // "google_calendar", "airbnb", "booking", "expedia"
  name         String // Nom personnalisé de l'intégration
  isActive     Boolean   @default(true) @map("is_active")
  accessToken  String?   @map("access_token") @db.Text
  refreshToken String?   @map("refresh_token") @db.Text
  expiresAt    DateTime? @map("expires_at")
  lastSyncAt   DateTime? @map("last_sync_at")
  settings     Json? // Configuration spécifique à chaque type d'intégration
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  events          ExternalEvent[]
  calendarConfigs CalendarConfig[]

  @@unique([userId, type])
  @@map("integrations")
}

model CalendarConfig {
  id            String   @id @default(cuid())
  integrationId String   @map("integration_id")
  roomId        String   @map("room_id")
  calendarId    String   @map("calendar_id") // ID de l'agenda Google Calendar
  calendarName  String   @map("calendar_name") // Nom de l'agenda pour l'affichage
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([integrationId, roomId])
  @@map("calendar_configs")
}

model ExternalEvent {
  id            String   @id @default(cuid())
  integrationId String   @map("integration_id")
  externalId    String   @map("external_id") // ID de l'événement sur la plateforme externe
  title         String
  description   String?
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  eventType     String   @map("event_type") // "reservation", "blocked", "maintenance", "personal"
  guestName     String?  @map("guest_name")
  guestEmail    String?  @map("guest_email")
  roomId        String?  @map("room_id") // Lien vers une chambre si applicable
  status        String   @default("confirmed") // "confirmed", "pending", "cancelled"
  metadata      Json? // Données supplémentaires spécifiques à la plateforme
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  room        Room?       @relation(fields: [roomId], references: [id], onDelete: SetNull)

  @@unique([integrationId, externalId])
  @@map("external_events")
}
